stages:
  - test
  - build
  - release
  - deploy-docs

variables:
  PYTHON_VERSION: "3.12"

test:
  stage: test
  script:
    - pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
    - python -m pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install pytest pytest-cov
    - pytest --cov=src tests/

build:
  stage: build
  script:
    - python -m pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install pyinstaller
    - if [ "$CI_COMMIT_BRANCH" == "main" ]; then pyinstaller -D -w -i resources/logo.ico -n LocalMediaSearch main.py; fi
    - if [ "$CI_COMMIT_BRANCH" == "develop" ]; then pyinstaller -D -w -i resources/logo.ico -n LocalMediaSearch main.py; fi
    - if [ "$CI_COMMIT_BRANCH" == "macos-latest" ]; then pyinstaller -D -w -i resources/logo.icns -n LocalMediaSearch main.py; fi
    - if [ "$CI_COMMIT_BRANCH" == "ubuntu-latest" ]; then pyinstaller -D -w -i resources/logo.ico -n LocalMediaSearch main.py; fi
  artifacts:
    paths:
      - dist/

release:
  stage: release
  script:
    - git config --global user.email "your-email@example.com"
    - git config --global user.name "Your Name"
    - git checkout -b release-$CI_COMMIT_TAG
    - git add .
    - git commit -m "Release $CI_COMMIT_TAG"
    - git tag -a $CI_COMMIT_TAG -m "Release $CI_COMMIT_TAG"
    - git push origin release-$CI_COMMIT_TAG
    - git push origin $CI_COMMIT_TAG
  only:
    - tags

deploy-docs:
  stage: deploy-docs
  script:
    - pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
    - python -m pip install --upgrade pip
    - pip install mkdocs mkdocs-material
    - mkdocs gh-deploy --force
  only:
    - main